# Generated by Django 4.2.6 on 2023-10-30 12:33

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("countries_plus", "0005_auto_20160224_1804"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("languages_plus", "0004_auto_20171214_0004"),
    ]

    operations = [
        migrations.CreateModel(
            name="Citation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("identifier", models.CharField(blank=True, max_length=500, null=True)),
                ("text", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="Dataset",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=250, verbose_name="Internal name")),
                ("fetch_url", models.URLField(blank=True, null=True, verbose_name="URL of the resource to fetch")),
                ("fetch_type", models.IntegerField(blank=True, choices=[(1, "DarwinCORE")], null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Created at")),
                ("last_modified_at", models.DateTimeField(auto_now=True, verbose_name="Last modified at")),
                ("validated_at", models.DateTimeField(blank=True, null=True, verbose_name="Validated at")),
            ],
            options={
                "verbose_name": "Dataset",
            },
        ),
        migrations.CreateModel(
            name="Keyword",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255)),
                ("definition", models.URLField()),
                ("description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="License",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=150)),
                ("url", models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name="Metadata",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(blank=True, max_length=500, null=True)),
                ("date_created", models.DateTimeField(blank=True, null=True)),
                ("logo_url", models.URLField(blank=True, null=True)),
                ("date_publication", models.DateField(blank=True, null=True)),
                ("abstract", models.TextField(blank=True, null=True)),
                ("maintenance_update_frequency", models.TextField(blank=True, null=True)),
                ("maintenance_update_description", models.TextField(blank=True)),
                ("geographic_description", models.TextField(blank=True)),
                ("bounding_box", django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ("formation_period_start", models.DateField(blank=True, null=True)),
                ("formation_period_end", models.DateField(blank=True, null=True)),
                ("project_id", models.CharField(blank=True, max_length=250, null=True)),
                ("project_title", models.CharField(blank=True, max_length=250, null=True)),
                ("project_abstract", models.TextField(blank=True)),
                ("project_study_area_description", models.TextField(blank=True)),
                ("project_design_description", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="MetadataIdentifier",
            fields=[
                ("id", models.CharField(max_length=500, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name="MethodStep",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("order", models.IntegerField(default=0)),
                ("description", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("first_name", models.CharField(blank=True, max_length=150, null=True)),
                ("last_name", models.CharField(blank=True, max_length=150, null=True)),
                ("position", models.CharField(blank=True, max_length=250, null=True)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                (
                    "belongs_to",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="datasets.organization"
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="countries_plus.country"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TaxonomyType",
            fields=[
                ("name", models.CharField(max_length=50, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name="Taxonomy",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=150)),
                ("type", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="datasets.taxonomytype")),
            ],
        ),
        migrations.CreateModel(
            name="PersonRole",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("role", models.CharField(max_length=10)),
                ("description", models.CharField(blank=True, max_length=250, null=True)),
                (
                    "metadata",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="people", to="datasets.metadata"
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="roles", to="datasets.person"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PersonIdentifier",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("type", models.CharField(max_length=150)),
                ("value", models.CharField(max_length=250)),
                ("person", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="datasets.person")),
            ],
        ),
        migrations.CreateModel(
            name="OrganizationRole",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("role", models.CharField(max_length=250)),
                (
                    "metadata",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="organizations",
                        to="datasets.metadata",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="roles", to="datasets.organization"
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="organization",
            constraint=models.UniqueConstraint(fields=("name",), name="unique_org_name"),
        ),
        migrations.AddField(
            model_name="metadataidentifier",
            name="metadata",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="datasets.metadata"),
        ),
        migrations.AddField(
            model_name="metadata",
            name="bibliography",
            field=models.ManyToManyField(blank=True, related_name="in_dataset_bibliography", to="datasets.citation"),
        ),
        migrations.AddField(
            model_name="metadata",
            name="citation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="cited_by_dataset",
                to="datasets.citation",
            ),
        ),
        migrations.AddField(
            model_name="metadata",
            name="dataset",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="metadata",
                to="datasets.dataset",
            ),
        ),
        migrations.AddField(
            model_name="metadata",
            name="keywords",
            field=models.ManyToManyField(blank=True, to="datasets.keyword"),
        ),
        migrations.AddField(
            model_name="metadata",
            name="language",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="languages_plus.language"
            ),
        ),
        migrations.AddField(
            model_name="metadata",
            name="license",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="datasets.license"
            ),
        ),
        migrations.AddField(
            model_name="metadata",
            name="taxonomies",
            field=models.ManyToManyField(blank=True, to="datasets.taxonomy"),
        ),
        migrations.AddConstraint(
            model_name="license",
            constraint=models.UniqueConstraint(fields=("name",), name="unique_license_name"),
        ),
        migrations.AddConstraint(
            model_name="license",
            constraint=models.UniqueConstraint(fields=("url",), name="unique_license_url"),
        ),
        migrations.AddConstraint(
            model_name="keyword",
            constraint=models.UniqueConstraint(fields=("name", "definition"), name="unique_kw_name_definition"),
        ),
        migrations.AddField(
            model_name="dataset",
            name="owner",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="owned_datasets",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Owner",
            ),
        ),
        migrations.AddField(
            model_name="dataset",
            name="validated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="validated_datasets",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Validator",
            ),
        ),
        migrations.AddConstraint(
            model_name="citation",
            constraint=models.UniqueConstraint(fields=("identifier", "text"), name="unique_citation"),
        ),
        migrations.AddConstraint(
            model_name="taxonomy",
            constraint=models.UniqueConstraint(fields=("name", "type"), name="unique_taxonomy_name_type"),
        ),
        migrations.AddConstraint(
            model_name="personidentifier",
            constraint=models.UniqueConstraint(fields=("person", "type", "value"), name="unique_pers_identifier"),
        ),
        migrations.AddConstraint(
            model_name="person",
            constraint=models.UniqueConstraint(
                fields=("first_name", "last_name", "position", "country", "email", "belongs_to"), name="unique_person"
            ),
        ),
    ]
