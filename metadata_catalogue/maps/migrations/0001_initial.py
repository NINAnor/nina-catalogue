# Generated by Django 4.2.8 on 2023-12-19 07:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import metadata_catalogue.maps.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Source",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=250)),
                ("slug", models.SlugField(blank=True, null=True)),
                ("extra", models.JSONField(blank=True, default=metadata_catalogue.maps.models.empty_json)),
                ("style", models.JSONField(blank=True, default=metadata_catalogue.maps.models.empty_json)),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RasterSource",
            fields=[
                (
                    "source_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="maps.source",
                    ),
                ),
                (
                    "source",
                    models.FileField(blank=True, null=True, upload_to=metadata_catalogue.maps.models.layers_folder),
                ),
                (
                    "original_data",
                    models.FileField(blank=True, null=True, upload_to=metadata_catalogue.maps.models.layers_folder),
                ),
                ("protocol", models.CharField(blank=True, null=True)),
                ("url", models.URLField(blank=True, null=True)),
                ("attribution", models.CharField(blank=True, max_length=250, null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("maps.source",),
        ),
        migrations.CreateModel(
            name="VectorSource",
            fields=[
                (
                    "source_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="maps.source",
                    ),
                ),
                (
                    "source",
                    models.FileField(blank=True, null=True, upload_to=metadata_catalogue.maps.models.layers_folder),
                ),
                (
                    "original_data",
                    models.FileField(blank=True, null=True, upload_to=metadata_catalogue.maps.models.layers_folder),
                ),
                ("protocol", models.CharField(blank=True, null=True)),
                ("url", models.URLField(blank=True, null=True)),
                ("attribution", models.CharField(blank=True, max_length=250, null=True)),
                ("default_layer", models.CharField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("maps.source",),
        ),
        migrations.CreateModel(
            name="Map",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=150)),
                ("slug", models.SlugField()),
                ("subtitle", models.CharField(blank=True, max_length=250, null=True)),
                ("description", models.TextField(blank=True)),
                ("zoom", models.IntegerField(blank=True, null=True)),
                ("extra", models.JSONField(blank=True, default=metadata_catalogue.maps.models.empty_json)),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LayerGroup",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("path", models.CharField(max_length=255, unique=True)),
                ("depth", models.PositiveIntegerField()),
                ("numchild", models.PositiveIntegerField(default=0)),
                ("name", models.CharField(max_length=150)),
                ("order", models.IntegerField(blank=True, default=0)),
                ("download_url", models.URLField(blank=True, null=True)),
                (
                    "map",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="groups",
                        to="maps.map",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Layer",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=250, null=True)),
                ("slug", models.SlugField(blank=True, null=True)),
                ("source_layer", models.CharField(blank=True, null=True)),
                ("style", models.JSONField(blank=True, default=metadata_catalogue.maps.models.empty_json)),
                ("map_order", models.IntegerField(default=0)),
                ("group_order", models.IntegerField(default=0)),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="layers",
                        to="maps.layergroup",
                    ),
                ),
                (
                    "map",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="layers", to="maps.map"
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="maps.source"
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="source",
            constraint=models.UniqueConstraint(models.F("name"), name="source with unique name"),
        ),
        migrations.AddConstraint(
            model_name="source",
            constraint=models.UniqueConstraint(models.F("slug"), name="source with unique slug"),
        ),
        migrations.AddConstraint(
            model_name="map",
            constraint=models.UniqueConstraint(models.F("slug"), name="map unique slug"),
        ),
        migrations.AddConstraint(
            model_name="layer",
            constraint=models.UniqueConstraint(fields=("slug", "map"), name="layer with unique slug"),
        ),
    ]
