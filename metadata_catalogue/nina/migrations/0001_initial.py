# Generated by Django 4.2.8 on 2024-01-09 10:51

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("taggit", "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx"),
        ("organizations", "0006_alter_organization_slug"),
        ("datasets", "0006_content_valid"),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name="Department",
            fields=[
                (
                    "organization_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="organizations.organization",
                    ),
                ),
                ("extid", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            bases=("organizations.organization",),
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "organization_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="organizations.organization",
                    ),
                ),
                ("extid", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("budget", models.BigIntegerField(blank=True, null=True)),
                ("status", models.CharField(blank=True, max_length=50, null=True)),
            ],
            bases=("organizations.organization",),
        ),
        migrations.CreateModel(
            name="Topic",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=150)),
            ],
        ),
        migrations.AddConstraint(
            model_name="topic",
            constraint=models.UniqueConstraint(models.F("name"), name="unique topic name"),
        ),
        migrations.AddField(
            model_name="project",
            name="category",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="nina.category"
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="customer",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="datasets.organization"
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="departments",
            field=models.ManyToManyField(blank=True, related_name="projects", to="nina.department"),
        ),
        migrations.AddField(
            model_name="project",
            name="tags",
            field=taggit.managers.TaggableManager(
                help_text="A comma-separated list of tags.",
                through="taggit.TaggedItem",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="topics",
            field=models.ManyToManyField(blank=True, to="nina.topic"),
        ),
        migrations.AddConstraint(
            model_name="department",
            constraint=models.UniqueConstraint(models.F("extid"), name="unique departemt extid"),
        ),
        migrations.AddConstraint(
            model_name="category",
            constraint=models.UniqueConstraint(models.F("name"), name="unique category name"),
        ),
        migrations.AddConstraint(
            model_name="project",
            constraint=models.UniqueConstraint(models.F("extid"), name="unique project code"),
        ),
    ]
